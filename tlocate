#!/usr/bin/env bash
#
# Written by: crossroads1112
# Purpose: mlocate written in bash, uses plain text file instead of database for indexing
#
#########################################################################################
techo(){ # Echos message prepended with name of script, interpreting special characters and not printing a newline at the end
    echo -ne "${0##*/}: $@"
}
techoerr(){ # See above but prints to stderr
    >&2 echo -ne "${0##*/}: $@"
}
updateTxt(){
    separator="###################################################"
    sudoCmd='sudo '
    # If user is root, don't use sudo
    (( EUID  == 0 )) && sudoCmd= 
    # Create find options based upon pruneDirs array
    [[ -n $pruneDirs ]] && \
        findOptsDirs=$(for dir in "${pruneDirs[@]}"; do [[ -d "$dir" ]] && echo -n " -path '$dir' -o";done) || isEmpty=$(($isEmpty + 1 ))

    # Same but for pruneNames. '*/' preceeds name because it doesn't matter what the parent directories of the pruneName are 
    #(e.g. /home/user/foo/.git and /home/user/bar/.git would all be pruned if '.git' is in pruneNames
    [[ -n $pruneNames ]] && \
        findOptsNames=$(for name in "${pruneNames[@]}"; do echo -n " -path '*/${name}' -o";done) ||\
        isEmpty=$(($isEmpty + 1 ))

    # This checks all of the mounted FSs against the entries in the pruneFS array and adds the offending mountpoints to the list of pruned directories
    [[ -n $pruneFS ]] && \
        findOptsFS=$(for badFSDir in \
            $(for fs in "${pruneFS[@]}"; do \
                mount | grep "type $fs" | awk '{print $3}'; \
            done); do \
            echo -n " -path '$badFSDir' -o";\
        done | sed 's/ -o$//') || \
        isEmpty=$(($isEmpty + 1 ))

    # If none of the prune* variables are defined, don't unclude the prune options in find
    if (( isEmpty < 3 )); then 
        wholeCmd="${sudoCmd}find / \( $findOptsDirs $findOptsNames $findOptsFS \) -prune -o -print 2>/dev/null | ${sudoCmd}tee -a $txtFile >/dev/null"
    else 
        wholeCmd="${sudoCmd}find / 2>/dev/null | ${sudoCmd}tee -a $txtFile >/dev/null"
        techo "WARNING: No prune options found in configuration file. Indexing whole filesystem\n"
    fi
    # If $quiet is equal to one, none of the info messages are displayed
    # Additionally, the $showCmd variable is enabled, sudo won't be called at all and the command will just be echoed (enabled via --pretend)
    (( quiet == 0 )) && techo "Indexing files requires root. Checking for sudo privileges.\n"
    # If user is not root, verify that they have sudo permissions
    (( showCmd == 0 )) && (( EUID != 0 )) && { sudo -v || exit 1; }  
    (( quiet == 0 )) && techo "Done\n"
    (( showCmd == 0 )) &&\
        header=$(echo -e "$date\n$separator$(
            for file in "${configFiles[@]}"; do 
                [[ -f "$file" ]] && {\
                    echo -e "\n#$file\n$separator"; sed '/^$/d' "$file" | grep -vE '^#' | sed 's/^/#/' | grep prune;\
                };\
            done)")
    (( showCmd == 0 )) && eval "${sudoCmd}tee $txtFile <<<\"$header\" &>/dev/null"
    (( quiet == 0 )) && techo "Indexing files..."
    (( showCmd == 1 )) && { echo "$wholeCmd"; return 0; } || eval "$wholeCmd"
    (( quiet == 0 )) && echo "Done."
}

queryTxt(){
    # Ensure that there are arguments
    (( $# == 0 )) && { techoerr "ERROR: no query for which to search\nRun ${0##*/} --help for more information\n"; return 1;} 
    # This is admittedly a crude way to ensure that it is a valid text file. It greps for the regex of the "last updated" line
    if ! head -n1 $txtFile | grep -Eq '^#[0-1][0-9]/[0-3][0-9]/[0-9][0-9] +at +[01]?[0-9]:[0-5][0-9] [AP]M$' ; then
        techoerr "$txtFile doesn't seem to be a valid ${0##*/} text file. To create one, run \`${0##*/} $(
            if [[ $txtFile != /etc/${0##*/}.txt ]]; then \
            echo -n "--txtfile $txtFile";\ 
            fi\
            ) --update\`.\nWARNING: This will overwrite the contents of $txtFile\n" # This if statements prints out the appropriate update command if -t is supplied
        exit 1 
    fi

    # This is really pretty complex and since it is all really one line, I can't add comments telling what each thing does.
    # TL;DR: it generates the apropriate grep command based upon the arguments and options
    [[ $all == 1 ]] && \
        grepCmd=$(echo -n "grep $grepArgs '$(
            if (( findBasename == 1 )); then\
                echo -n "$(sed 's/^\^/\//' <<<"$1")[^/]*$"; \
            else \
                echo -n "$1";\
            fi)' $txtFile "; \
        shift;\
        for term in "$@"; do\
            echo -n "| grep $grepArgs '$(
            if (( findBasename == 1 )); then\
                echo -n "$(sed 's/^\^/\//' <<<"$term")[^/]*$"; \
            else \
                echo -n "$term";\
            fi)'";\
        done) || \
        \
        grepCmd="grep $grepArgs $(
        (( noRegex == 0 )) && echo -n "'"; \
        for term in "$@"; do \
            (( findBasename == 1 )) && term="$(sed 's/^\^/\//' <<< "$term")[^/]*$";\
            if (( noRegex == 1 )); then\
                echo -n "-e '$term' "; \
            else \
            echo -n "${term}|";\
            fi; done | \
            sed 's/|$//' | sed -r 's/ +$//')$( (( noRegex == 0 )) && echo -n "'" ) $txtFile" 
    # Whew, that was intense

    # This next block here adds the grep command that filters out lines that start with '#' (to avoid matching things generated by this script).
    # If some test/filter is specified it adds the while loop and if there is more than one, it adds {} around the filters for cleanliness
    wholeCmd="$grepCmd |  grep -v '^#' $(
        if (( doTest == 1 )); then \
            echo -n " | while read path; do $(
                if (( customTestCount > 1 )); then\
                    echo -n "{ $(sed 's/ $//' <<<"$testCmd"); }";\
                else \
                    echo -n "$testCmd";\
                fi) && echo \"\$path\";\
            done";\
        fi) $headCmd $nullCmd $countCmd"

    # This bit is pretty obvious. If showCmd equals 1, echo the command, otherwise execute it.
    # There is a bit of inefficiency here in that it evals the grep command twice which is wasteful.
    # The first time, it does so to ensure that there is output (otherwise it fails) and the next time in prints it.
    # This was necessary due to issues I had with capturing the exit code of the grep command
    (( showCmd == 1 )) &&\
        { echo "$wholeCmd"; return 0; }\
        || \
        { [[ -z $(eval "$wholeCmd") ]] && return 1 || eval "$wholeCmd"; }

    # Add that "Last updated" line to the end of the output
    (( quiet == 0 )) &&\
        techo "List last updated $(head -n1 $txtFile | sed 's/#//')\n"  || true
}
txtStats(){
    eval "$(grep -E '^#' $txtFile | sed 's/^#//' | grep -E "^prune(FS|Names|Dirs)=\(")"

    echo "$(tput bold)Text file path:$(tput sgr0) $txtFile"
    echo
    echo "$(tput bold)Total entries in text file:$(tput sgr0) $(grep -Ev "^#" "$txtFile" | wc -l | awk '{print $1}')"
    echo
    echo "$(tput bold)Text file last updated:$(tput sgr0) $(head -n1 "$txtFile" | sed 's/^#//')"
    echo
    echo "$(tput bold)Config file(s):$(tput sgr0) $(\
        for file in "${configFiles[@]}"; do \
            grep -q "#${file}" $txtFile && echo -n "${file}, ";\
        done | sed 's/, $//')"
    echo
    echo "$(tput bold)Pruned filesystems:$(tput sgr0) ${pruneFS[@]}"
    echo
    echo "$(tput bold)Pruned directories:$(tput sgr0) ${pruneDirs[@]}"
    echo
    echo "$(tput bold)Pruned names:$(tput sgr0) ${pruneNames[@]}"
}

customTest(){
    findBasename=1
    doTest=1 
    # Add test to testCmd and reflext this in $customTestCount
    eval "testCmd+='[[ $@ \"\$path\" ]] '"
    customTestCount=$(($customTestCount + 1 ))
}

checkConflicts(){
    # This funciton basically exists deal with the user doing stupid things with the options
    # Really though, if you are going to use the --count option, why use --null?
    # If this does happen, null is just ignored
    if [[ -n $countCmd && -n $nullCmd ]]; then
        nullCmd=""
    fi
    # Wholename trumps basename
    (( findWholename == 1 )) && findBasename=0

    # This is either due to a limitation in grep or my understanding but I can't get --basename to work without regexes
    if ! grep -q -- "-E" <<<"$grepArgs" && (( findBasename == 1 )); then
        techoerr "${0##*/}: --basename requires regexes.\nA possible workaround would be to alter your query by adding a '\' before each character that would be interpreted as a regex (e.g. \()[].?+* etc.)\n"
        exit 1
    fi
    # This regex ensures that the syntax goes --filter --and/or --filter 
    if [[ -n $testCmd ]] && ! grep -Eq '^(\[{2}( +!)? +-[a-z,A-Z] +"\$path" +\]{2}( +[|&]{2} +)?)+$'  <<<$(sed 's/ $//' <<<"$testCmd"); then
        techoerr "There seems to be a problem with your filter syntax. You need to add an '--and' or a '--or' between each filter. Please run ${0##*/} -h for more information\n"
        exit 1
    fi
}

configFiles=( "/etc/${0##*/}.conf" "$HOME/.config/${0##*/}.conf" )
txtFile=/etc/${0##*/}.txt
date=$(date "+#%D at %l:%M %p" | tr -s ' ' ' ')

noRegex=0
isEmpty=0
all=0
update=0
showCmd=0
findWholename=0
stats=0
customTestCount=0
doTest=0
findBasename=0
[[ -t 1 ]] && quiet=0 || quiet=1

grepArgs="-E"
countCmd=
nullCmd=
checkLogOp="&&"
testCmd=
TEMP="$(getopt -o b,h,0,x,i,w,o,t:,p,A,e,u,c,S,q,a,n,l: -l help,and,or,wholename,files,dirs,links,files-zero,files-nonzero,has-read,has-write,has-execute,char-devs,block-devs,sockets,pipes,user-owned,group-owned,has-setgid,has-setuid,has-sticky,no-files,no-dirs,no-links,no-has-read,no-has-write,no-has-execute,no-char-devs,no-block-devs,no-sockets,no-user-owned,no-group-owned,no-has-sticky,no-pipes,no-has-setgid,no-has-setuid,statistics,basename,pretend,null,quiet,noregex,count,ignore-casetxtfile:,existing,update,all,limit -n "${0##*/}" -- "$@")" || exit 2

helpMsg="Usage: ${0##*/} [OPTION]... [PATTERN]...\n\
Search for entries in the ${0##*/} text file\n\n\
OPTIONS:\n\
-A,--all\t\tonly print entries that match all patterns\n\
-b,--basename\t\tmatch only the base name of path names\n\
-c,--count\t\tonly print number of found entries\n\
-t,-txtfile\t\tTXTFILE use TXTFILE instead of default text file (which is $txtFile)\n\
-e,--existing\t\tonly print entries for currently existing files\n\
-h,--help\t\tprint this help\n\
-i,--ignore-case\tignore case distinctions when matching patterns\n\
-l,--limit\t\tLIMIT limit output (or counting) to LIMIT entries\n\
-p,--pretend\t\tprint the query or update command that would be run instead of running it\n\
-0,--null\t\tseparate entries with NUL on output\n\
-S,--statistics\t\tdon't search fo entries, print statistics about the ${0##*/} text file ($txtFile by default)\n\
-q,--quiet\t\tsupress \"${0##*/}: \" messages and timestamp when querying (automatically enabled when feeding into a pipe)\n\
-x,--noregex\t\tinterpret PATTERN literally rather than as a regular expression\n\
-w, --wholename\t\tmatch whole path name (default). Overrides --basename\n\n\n\
\
\
The following options allow for the filtering of the responses by type or attribute. These options also may cause slowdowns in querys with lots of results. All of the followinf filters imply --existing\n\n\
\
--files, --no-files\t\t\tentry is (not) regular file (includes links)\n\
--dirs, --no-dirs\t\t\tentry is (not) a directory\n\
--links, --no-links\t\t\tentry is (not) a symbolic link\n\
--char-devs, --no-char-devs\t\tentry is (not) a character device\n\
--block-devs, --no-block-devs\t\tentry is (not) a block device\n\
--sockets,--no-sockets\t\t\tentry is (not) a socket\n\
--pipes,--no-pipes\t\t\tentry is (not) a pipe\n\
--files-zero,--files-nonzero\t\tentry a file and is (not) zero bytes in length\n\
--has-read,--no-has-read\t\tread permission is (not) granted on entry\n\
--has-write,--no-has-write\t\twrite permission is (not) granted on entry\n\
--has-execute,--no-has-execute\t\texecute permission is (not) granted on entry\n\
--user-owned,--no-user-owned\t\tentry is owned effective user ID\n\
--group-owned,--no-group-owned\t\tentry is owned by effective group ID\n\
--has-setuid,--no-has-setuid\t\tset-user-ID bit is (not) set on entry\n\
--has-setgid,--no-has-setgid\t\tentry is (not) set-group-ID\n\
--has-sticky,--no-has-sticky\t\tsticky bit is (not) set on entry\n\
-o,--or\t\t\t\t\tAdd logical operator OR between two filters\n\
-a,--and\t\t\t\tAdd logical operator AND between two filters\n\n\
\
NOTE: To use multiple filters, you must specify --or or --and between each filter"

for i in "${configFiles[@]}"; do 
    [[ -f "$i" ]] && source "$i"
done
    

eval set -- "$TEMP"
while true; do
    case "${1}" in
        -u|--update) update=1;;
        -q|--quiet) quiet=1;;
        -h|--help) echo -e "$helpMsg" | less; exit;;
        -l|-n|--limit) 
            if [[ "$2" =~ ^[0-9]+$ ]]; then
                headCmd="| head -n${2}"
                shift
            else
                techoerr "Limit must be a positive integer\n" 
                exit 1
           fi 
           ;;
       -c|--count)countCmd="| wc -l";;
       -A|--all) all=1;;
       -e|--existing)  customTest '-e';;
       -t|--txtfile)txtFile="$2";; 
       -i|--ignore-case) grepArgs+=" -i";;
       -p|--pretend)showCmd=1; quiet=1;;
       -x|--noregex)grepArgs=$(sed 's/-E//' <<<"$grepArgs"); grepArgs+=' -F'; noRegex=1;;
       -S|--statistics) stats=1;;
       -0|--null)nullCmd="| tr '\n' '\x00'" ;; 
       -b|--basename) findBasename=1;;
       -w|--wholename)findWholename=1;;
       -o|--or) testCmd+="|| ";;
       -a|--and) testCmd+="&& ";;
       --files)customTest '-f';;
       --no-files) customTest '! -f';;
       --dirs)customTest '-d';;
       --no-dirs)customTest '-d';;
       --links)customTest '-h';;
       --no-links)customTest '! -h';;
       --files-nonzero)customTest '-s';;
       --files-zero)customTest '! -s';;
       --has-read)customTest '-r';;
       --no-has-read) customTest '! -r';;
       --has-write) customTest '-w';;
       --no-has-write) customTest '! -w';;
       --has-execute) customTest '-x';;
       --no-has-execute) customTest '! -x';;
       --char-devs) customTest '-c';;
       --no-char-devs) customTest '! -c';;
       --block-devs) customTest '-b';;
       --no-block-devs) customTest '! -b';;
       --sockets) customTest '-S';;
       --no-sockets) customTest '! -S';;
       --user-owned) customTest '-O';;
       --no-user-owned) customTest '! -O';;
       --group-owned) customTest '-G';;
       --no-group-owned) customTest '! -G';;
       --has-sticky) customTest '-k';;
       --no-has-sticky) customTest '! -k';;
       --pipes) customTest '-p';;
       --no-pipes) customTest '! -p' ;;
       --has-setgid) customTest '-g' ;;
       --no-has-setgid) customTest '! -g';;
       --has-setuid) customTest '-u';;
       --no-has-setuid) customTest '! -u';; 
       --) shift; break;;
   esac
   shift
done
checkConflicts
if (( update == 1 )); then 
    updateTxt && exitCode=$?
elif (( stats == 1 )) && (( $# == 0 )); then
    txtStats
    exit 0
else
    queryTxt "$@" && exitCode=$?
fi
(( stats == 1 )) && { echo -e "--------------------------------------------"; txtStats; } || exit $exitCode
